# -*- coding: utf-8 -*-
"""Lab4_B21CH025

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q173jC3rBvvSxWZfSuMwTlHuBUEZVjip

# 1 (a)
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
import seaborn as sns 
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv('/content/drive/MyDrive/IML Lab/diabetes (1) (1).csv' , encoding = 'windows=1252')
df.head()

df.isnull().sum()

sns.set(rc={'figure.figsize':(11.7,8.27)})
sns.distplot(df['Age'], bins=30)
plt.show()

correlation_matrix = df.corr().round(2)
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True)

plt.figure(figsize=(20, 5))

features = ['Pregnancies', 'SkinThickness']
target = df['Age']

for i, col in enumerate(features):
    plt.subplot(1, len(features) , i+1)
    x = df[col]
    y = target
    plt.scatter(x, y, marker='o')
    m, c = np.polyfit(x, y, 1)
    plt.plot(x, m*x + c, "r")

    plt.title(col)
    plt.xlabel(col)
    plt.ylabel('Age')

X = pd.DataFrame(np.c_[df['Pregnancies'], df['SkinThickness']], columns = ['Pregnancies','SkinThickness'])
Y = df['Age']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=5)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

lin_model = LinearRegression()
lin_model.fit(X_train, Y_train)

# model evaluation for training set
y_train_predict = lin_model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))
r2 = r2_score(Y_train, y_train_predict)

print("The model performance for training set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

# model evaluation for testing set
y_test_predict = lin_model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))
r2 = r2_score(Y_test, y_test_predict)

print("The model performance for testing set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

"""# 1 (b)"""

import numpy as np
import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/IML Lab/diabetes (1) (1).csv' , encoding = 'windows=1252')
np.set_printoptions(formatter={'float_kind':'{:f}'.format})
cross_tab = np.matmul(np.matrix.transpose(df.values), df.values)
cross_tab

X = df[["Pregnancies", "Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI","DiabetesPedigreeFunction","Outcome"]].values
y = df[["Age"]].values

XT = np.matrix.transpose(X)

XT_X = np.matmul(XT, X)
XT_X

XT_X_inv = np.linalg.inv(XT_X)
XT_X_inv

XT_y = np.matmul(XT, y)
XT_y

betas = np.matmul(XT_X_inv, XT_y)
betas

import statsmodels.api as sm

regressor = sm.OLS(y, X).fit()
print(regressor.summary())

yT_y = cross_tab[-1:, -1:]
n = cross_tab[:1, :1]
y_bar_square = np.square(cross_tab[:1, -1:])

SST = yT_y - (y_bar_square / n)
SST

n = cross_tab[:1, :1]
y_bar_square = np.square(cross_tab[:1, -1:])

SSR = np.sum(np.multiply(betas, XT_y)) - (y_bar_square / n)
SSR

r_square = SSR / SST
r_square

"""# 2 (a)"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
import seaborn as sns 
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score

X = pd.DataFrame(np.c_[df['Pregnancies'], df['SkinThickness']], columns = ['Pregnancies','SkinThickness'])
Y = df['Age']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=5)
norm = MinMaxScaler().fit(X_train)
X_train_norm = norm.transform(X_train)
X_test_norm = norm.transform(X_test)
X_train_norm

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

dfscaled=scaler.fit_transform(X)

np.mean(dfscaled[:,0]), np.std(dfscaled[:,0])
np.mean(dfscaled[:,1]), np.std(dfscaled[:,1])

df_df = pd.DataFrame(dfscaled)

from sklearn.preprocessing import MinMaxScaler
minmax = MinMaxScaler()
minmax.fit(X)
minmaxdf = minmax.transform(X)

minmaxdf[1:5,]

"""# 2 (b)"""

X = pd.DataFrame(np.c_[df['Pregnancies'], df['SkinThickness']], columns = ['Pregnancies','SkinThickness'])
Y = df['Age']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state=5)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

lin_model = LinearRegression()
lin_model.fit(X_train, Y_train)

# model evaluation for training set
y_train_predict = lin_model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))
print('RMSE is {}'.format(rmse))

# model evaluation for testing set
y_test_predict = lin_model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))
print('RMSE is {}'.format(rmse))

X = pd.DataFrame(np.c_[df['Pregnancies'], df['SkinThickness']], columns = ['Pregnancies','SkinThickness'])
Y = df['Age']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state=5)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

lin_model = LinearRegression()
lin_model.fit(X_train, Y_train)

# model evaluation for training set
y_train_predict = lin_model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))
print('RMSE is {}'.format(rmse))

# model evaluation for testing set
y_test_predict = lin_model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))
print('RMSE is {}'.format(rmse))

X = pd.DataFrame(np.c_[df['Pregnancies'], df['SkinThickness']], columns = ['Pregnancies','SkinThickness'])
Y = df['Age']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.5, random_state=5)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

lin_model = LinearRegression()
lin_model.fit(X_train, Y_train)

# model evaluation for training set
y_train_predict = lin_model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))
print('RMSE is {}'.format(rmse))

# model evaluation for testing set
y_test_predict = lin_model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))
print('RMSE is {}'.format(rmse))

"""# 2 (c)"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
import seaborn as sns 
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv('/content/drive/MyDrive/IML Lab/diabetes (1) (1).csv' , encoding = 'windows=1252')
df.head()

plt.figure(figsize=(20, 5))

features = ['Glucose']
target = df['Age']

for i, col in enumerate(features):
    plt.subplot(1, len(features) , i+1)
    x = df[col]
    y = target
    plt.scatter(x, y, marker='o')
    plt.title(col)
    m, c = np.polyfit(x, y, 1)
    plt.plot(x, m*x + c, "r")
    plt.xlabel(col)
    plt.ylabel('Age')

df = pd.read_csv('/content/drive/MyDrive/IML Lab/diabetes (1) (1).csv' , encoding = 'windows=1252')
df.head()

plt.figure(figsize=(20, 5))

features = ['Insulin']
target = df['Age']

for i, col in enumerate(features):
    plt.subplot(1, len(features) , i+1)
    x = df[col]
    y = target
    plt.scatter(x, y, marker='o')
    plt.title(col)
    m, c = np.polyfit(x, y, 1)
    plt.plot(x, m*x + c, "r")
    plt.xlabel(col)
    plt.ylabel('Age')